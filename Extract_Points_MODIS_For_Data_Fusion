// The GEE code prepared for extracting advanced metrics from MODIS satellites

// The code is organised into three sub-steps: 

// * The first sub-step concerns how retain and pre-process available imageries, hence to avoid 
//    anomalous pixels, softening uncertainties and retaining high-quality pixels prior spectral metrics calculation.

// * The second sub-step shows how to retain Spectral Metrics for each available multispectral imagery.

// * The third sub-step demonstrates how to apply spatial and temporal scales when extracting remotely sensed pixels from ground-based data.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Sub-step 1: Create the highest quality MODIS composites.

  // Selecting two MODIS collections, namely GPP and LST
  var GPP = ee.ImageCollection("MODIS/006/MOD17A2H"),
  LST = ee.ImageCollection("MODIS/006/MYD11A2"),
  
  // Selecting a dataset of example for data extraction, comprising of study area and a spatial point dataframe (entire or subsetted per year)
  Area = ee.FeatureCollection("users/valeriofrank/Methods_Ecol_Evol/Study_Area"),
  // pts_all = ee.FeatureCollection("users/valeriofrank/Methods_Ecol_Evol/Ground_Observations_All_2018_2021");
  pts1 = ee.FeatureCollection("users/valeriofrank/Methods_Ecol_Evol/Ground_Observations_2017");
  // pts2 = ee.FeatureCollection("users/valeriofrank/Methods_Ecol_Evol/Ground_Observations_2018");
  // pts3 = ee.FeatureCollection("users/valeriofrank/Methods_Ecol_Evol/Ground_Observations_2019");
  // pts4 = ee.FeatureCollection("users/valeriofrank/Methods_Ecol_Evol/Ground_Observations_2020");
  // pts5 = ee.FeatureCollection("users/valeriofrank/Methods_Ecol_Evol/Ground_Observations_2021");

  //Defining ground data and representative period
  var points = pts41;//User may repeat this step for pts2, pts3, et√ß. Alternatively, the user can possibly run the entire dataset (pts_all)
  var start = "2017-01-01"; //Start of time period //Year/Month/Day/
  var end = "2017-12-31"; // End of time period
  
  // Renaming the variables from the collections
  var GPPbands = ['Gpp'];
  var GPPband_names = ['GPP'];

  var LSTbands = ['LST_Day_1km'];
  var LSTband_names = ['LST'];

  // Definining the period, as well as the area where restrict each remote sensing data collection. 
  // Getting the dataset within the selected period for the collection GPP, while renaming bands.
  var GPPfiltered = GPP.filterDate(start, end).select(GPPbands, GPPband_names).map(function(img){return img.clip(Area)}); 
  var GPPIndices  = GPPfiltered.select('GPP');

  // Getting the dataset within the selected period for the collection LST, while renaming bands.
  var LSTfiltered = LST.filterDate(start, end).select(LSTbands, LSTband_names).map(function(img){return img.clip(Area)}); 
  var LSTIndices  = LSTfiltered.select('LST');

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Sub-step 2: Retain Spectral Metrics.

 // Scaling unit of measurement to Kelvin and converting to Celsius, while retaining image acquisition time.
  var LSTIndices = LSTIndices.map(function(img) {
  return img
    .multiply(0.02)
    .subtract(273.15)
    .copyProperties(img, ['system:time_start']);
  });
  
  // Combining the two MODIS collections
  var GPP_LST_Indices = ee.ImageCollection(GPPfiltered.combine(LSTIndices));

  print('Second check of image collection - Habitat Metrics:', GPP_LST_Indices);


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Sub-step 3: Apply spatial and temporal scales on retained metrics for ground-data extraction. 

  // Applying spatial scales
  // Creating a function to apply (square) Moving Windows to computed metrics, utilising mean as pixel aggregating formula.
  var addTexture_3X3_Mean = function(image) {
  var texture = image.select(['GPP','LST']).reduceNeighborhood({
  // Defining the aggregating formula (i.e, mean)
  reducer: ee.Reducer.mean().unweighted(),
  // Defining the shape for Moving Windows (i.e, square or round) and size (e.g., 3)
  kernel: ee.Kernel.square(3),
  // Renaming the calculated metrics and returning as bands to the collection
  }).rename(['GPP_3S_Mn','LST_3S_Mn']);
  return image.addBands(texture.add(ee.Image(0.0)));
  };
  
  // Creating a function to apply (square) Moving Windows to computed metrics, utilising standard deviation as pixel aggregating formula.
  var addTexture_3X3_stdDev = function(image) {
  var texture = image.select(['GPP','LST']).reduceNeighborhood({
  // Defining the aggregating formula (i.e, standard deviation)
  reducer: ee.Reducer.stdDev().unweighted(),
  // Defining the shape for Moving Windows ((e.g., square or round) and size (e.g., 3)
  kernel: ee.Kernel.square(3),
  // Renaming the calculated metrics and returning as bands to the collection
  }).rename(['GPP_3S_Sd','LST_3S_Sd']);
  return image.addBands(texture.add(ee.Image(0.0)));
  };
  
  var GPP_LST_Indices_MnSd = GPP_LST_Indices.map(addTexture_3X3_Mean).map(addTexture_3X3_stdDev);


  // Calling the variable names
  var varbands = ['GPP','LST',
  'GPP_3S_Mn','LST_3S_Mn',
  'GPP_3S_Sd','LST_3S_Sd',
  ];
  
  // Selecting words to rename up to 10 characters due to column heading limits in the final Spatial Point Data Frame
  var varband_names = ['GPP','LST',
  'GPP_3M','LST_3M',
  'GPP_3S','LST_3S',
  ];
  
  // Renaming the Spectral Bands, Spectral Metrics, and Texture variables.
  var GPP_LST_Indices_MnSd = GPP_LST_Indices_MnSd.select(varbands, varband_names);
  
  print('Second check of image collection:', GPP_LST_Indices_MnSd);


 // Applying temporal scales
  // First is required to filter the image colletion with a ground-base Spatial-Points-Dataframe (or Spatial-Polygons-Dataframe, or Spatial-Lines-Dataframe)
  // The filtering process rely on the temporal resolution of the time step (or time stamp) within the ground-based dataset.
  
  // Creating an object with spatio-temporally extracted information from groun-data
  var ExtractedPoints = points.map(function(feature){
  
  // Identifying the date associated to each ground observation.
  var date = ee.Number(feature.get('timestamp2'));
  
  // Calling the temporal information in a legible format (e.g., YYYY/MM/dd). 
  // Others legible formats can be found here: https://developers.google.com/earth-engine/apidocs/ee-date-parse
  date = ee.Date.parse('YYYY/MM/dd', date);
  
  // Determining the size of Moving Windows for temporally scaling remotely sensed information from each time of observation.
  var startTempWind = date.advance(-1,'days');
  var endTempWind = date.advance(1,'days');
  
  // Selecting the aggregating formula (e.g., mean or standard deviation)
  var FiltTempWind = GPP_LST_Indices_MnSd.filterDate(startTempWind, endTempWind)
  .sort("CLOUD_COVER").mean();
  
  // Extracting the remotely sensed information using the geometry feature                   
  var data = FiltTempWind.reduceRegion(ee.Reducer.mean(), feature.geometry(), 250);
  
  return ee.Feature(feature.setMulti(data));
  });
  
  // Merging the extracted information with the original Spatial Dataframe
  // Calling the original Spatial Dataframe.
  var OriginalSpatialPointsDataframe = points;
  
  // Calling the extracted Spatial Dataframe.
  var ExtractedSpatialPointsDataframe = ee.FeatureCollection(ExtractedPoints);
  
  // Defining the matching field between the two collections.
  var JoinFilter = ee.Filter.equals({
  leftField: 'ID',
  rightField: 'ID'
  });
  
  // Defining the join parameter.
  var ParJoin = ee.Join.inner('primary', 'secondary');
  
  // Applying the parameter to concatenate the two collections.
  var DataframeJoin = ParJoin.apply(OriginalSpatialPointsDataframe, ExtractedSpatialPointsDataframe,  JoinFilter);
  
  // Creating a function to collapse the Extracted Spatial Dataframe into the Original Spatial Dataframe.
  function CollapsJoin(feature){
  return ee.Feature(feature.get('primary')).copyProperties(feature.get('secondary'));
  }
  
  // Applying the collapse function.
  var DataframeJoin = DataframeJoin.map(CollapsJoin);
  print('Check the first row of the SpatialPointsDataframe:', DataframeJoin.first());
  
  // Exporting the Spatial Dataframe to a SHP file.
  Export.table.toDrive({
  collection: DataframeJoin,
  description:'MODIS_PA_GPP_LST_2017',
  fileFormat: 'SHP'
  });