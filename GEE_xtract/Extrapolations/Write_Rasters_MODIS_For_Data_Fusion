// The GEE_extract code prepared for extracting data from MODIS satellites

// The code is organised into three sub-steps: 

// * The first sub-step concerns the retention and pre-processing of the available images, to avoid anomalous pixels, 
//  softening uncertainties and retaining high quality pixels

// * The second sub-step shows how to calculate spectral metrics for each available multispectral image of the time-series

// * The third sub-step demonstrates how to apply spatial and temporal scales along the time-series, then to extract remotely sensed information from ground data.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Sub-step 1: Data filtering
   
  // The user can select MODIS collections (https://developers.google.com/earth-engine/datasets/catalog/modis), namely GPP and LST
  var GPP = ee.ImageCollection("MODIS/006/MOD17A2H"),
  LST = ee.ImageCollection("MODIS/006/MYD11A2"),
  
  // Then, the user should select a study area polygon, that need to be imported within the EECE, 
  // as asset through the Asset Manager (https://developers.google.com/earth-engine/guides/asset_manager)
  
  Area = ee.FeatureCollection("users/valeriofrank/GEE_xtract/Study_Area"); //The study area vector used as example
    
  var start = "2017-01-01"; //Start of time period (Year-Month-Day)
  var end = "2017-12-31"; // End of time period
  
  // Users may rename the two metrics before merging collections
  var GPPbands = ['Gpp'];
  var GPPband_names = ['GPP'];

  var LSTbands = ['LST_Day_1km'];
  var LSTband_names = ['LST'];

  // Here the users should define the period, as well as the area where restrict remote sensing data collections
    
  // The GPP metric is renamed, the collection is filtered according to the selected period, to a geographical extent,
  // and is cut to the study area
  var GPPfiltered = GPP.filterDate(start, end).select(GPPbands, GPPband_names).map(function(img){return img.clip(Area)}); 
  var GPPIndices  = GPPfiltered.select('GPP');

  // The LST metric is renamed, the collection is filtered according to the selected period, to a geographical extent,
  // and is cut to the study area
  var LSTfiltered = LST.filterDate(start, end).select(LSTbands, LSTband_names).map(function(img){return img.clip(Area)}); 
  var LSTIndices  = LSTfiltered.select('LST');

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Sub-step 2: Metrics calculation

 // LST unit of measurement from Kelvin is converted to Celsius, while retaining image acquisition time
  var LSTIndices = LSTIndices.map(function(img) {
  return img
  .multiply(0.02)
  .subtract(273.15)
  .copyProperties(img, ['system:time_start']);
  });
  
  // Users need to combine the two collections
  var GPP_LST_Indices = ee.ImageCollection(GPPfiltered.combine(LSTIndices));

  print('Second check of image collection - Habitat Metrics:', GPP_LST_Indices);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Sub-step 3: Data scaling

  // Users may define spatial and temporal scales on calculated metrics prior ground-data extraction
  
  // Spatial scaling
  
  // A constructor (addTexture_3X3_Mean) incorporating a scaling function that utilise Spatial Moving Windows of 3 pixels size, and a mean aggregating formula
  // Users may eventually change the name of the constuctor if they change some parameter (e.g., addTexture_6X6_Mean)
  var addTexture_3X3_Mean = function(image) {
  // Users may here define which metrics to scale
  var texture = image.select(['GPP','LST']).reduceNeighborhood({
  // Users may here define the type of aggregating formula (i.e, mean; https://developers.google.com/earth-engine/apidocs/ee-reducer-mean)
  // and the type of weight within spatial moving windows (https://developers.google.com/earth-engine/apidocs/ee-reducer-unweighted)
  reducer: ee.Reducer.mean().unweighted(),
  // Users may here define the shape of spatial moving windows (i.e, square or round;https://developers.google.com/earth-engine/apidocs/ee-kernel-circle)
  // and size (e.g., 3)
  kernel: ee.Kernel.circle(3),
  // Calculated metrics may be renamed
  }).rename(['GPP_3S_Mn','LST_3S_Mn']);
  // Scaled metrics may be reutrned as new bands
  return image.addBands(texture.add(ee.Image(0.0)));
  };
   
  // A constructor (addTexture_3X3_stdDev) incorporating a scaling function that utilise Spatial Moving Windows of 3 pixels size, and a standard deviation aggregating formula
  // Users may eventually change the name of the constuctor if they change some parameter (e.g., addTexture_6X6_Mean)
  var addTexture_3X3_stdDev = function(image) {
  // Users may here define which metrics to scale
  var texture = image.select(['GPP','LST']).reduceNeighborhood({
  // Users may here define the type of aggregating formula (i.e, mean; https://developers.google.com/earth-engine/apidocs/ee-reducer-mean)
  // and the type of weight within spatial moving windows (https://developers.google.com/earth-engine/apidocs/ee-reducer-unweighted)
  reducer: ee.Reducer.stdDev().unweighted(),
  // Users may here define the shape of spatial moving windows (i.e, square or round;https://developers.google.com/earth-engine/apidocs/ee-kernel-circle)
  // and size (e.g., 3)
  kernel: ee.Kernel.circle(3),
  // Calculated metrics may be renamed
  }).rename(['GPP_3S_Sd','LST_3S_Sd']);
  return image.addBands(texture.add(ee.Image(0.0)));
  };
  
  // Here, scale metrics are added to the collection
  var GPP_LST_Indices_MnSd = GPP_LST_Indices.map(addTexture_3X3_Mean).map(addTexture_3X3_stdDev);


 // Identify the variable calculated to retain within the collection
  var varbands = ['GPP','LST',
  'GPP_3S_Mn','LST_3S_Mn',
  'GPP_3S_Sd','LST_3S_Sd',
  ];
  
  // Selecting words to rename such variables, up to 10 characters due to column heading limits in the final Spatial Point Data Frame
  var varband_names = ['GPP','LST',
  'GPP_3M','LST_3M',
  'GPP_3S','LST_3S',
  ];
  
  // Here user may rename the Spectral Metrics
  var GPP_LST_Indices_MnSd = GPP_LST_Indices_MnSd.select(varbands, varband_names);
  
  print('Second check of image collection:', GPP_LST_Indices_MnSd);

  // select lst
  var lst = GPP_LST_Indices.select('LST');
  
  // Reduce the collection with a median reducer
  var lst = lst.reduce(ee.Reducer.median());

  Export.image.toDrive({
  image: lst.clip(Area),
  region:Area,
  description: 'LST',
  scale: 250,
  maxPixels:1e13,
  skipEmptyTiles: true
  });
  
