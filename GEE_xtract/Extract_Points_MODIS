// The GEE code prepared for extracting data from MODIS satellites

// The code is organised into three sub-steps: 

// * The first sub-step concerns how retain and pre-process available imageries, hence to avoid 
//    anomalous pixels, softening uncertainties and retaining high-quality pixels prior spectral metrics calculation.

// * The second sub-step shows how to calculate Spectral Metrics for each available multispectral imagery.

// * The third sub-step demonstrates how to apply spatial and temporal scales when extracting remotely sensed pixels from ground-based data.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Sub-step 1: Create the highest quality MODIS composites.

  // Selecting two MODIS collections, namely MODIS1 (M1_250) and MODIS2 (M2_500), with native spectral bands.
  var M1_250 = ee.ImageCollection("MODIS/061/MOD09GQ"), 
  M2_500 = ee.ImageCollection("MODIS/061/MOD09GA"),
    
  // Selecting a dataset of example for data extraction, comprising of study area and a spatial point dataframe (entire or subsetted per year)
  Area = ee.FeatureCollection("users/valeriofrank/GEE_xtract/Study_Area"),
  // pts_all = ee.FeatureCollection("users/valeriofrank/GEE_xtract/Ground_Observations_All_2017_2021"),
  pts1 = ee.FeatureCollection("users/valeriofrank/GEE_xtract/Ground_Observations_2017");
  // pts2 = ee.FeatureCollection("users/valeriofrank/GEE_xtract/Ground_Observations_2018");
  // pts3 = ee.FeatureCollection("users/valeriofrank/GEE_xtract/Ground_Observations_2019");
  // pts4 = ee.FeatureCollection("users/valeriofrank/GEE_xtract/Ground_Observations_2020");
  // pts5 = ee.FeatureCollection("users/valeriofrank/GEE_xtract/Ground_Observations_2021");
  
  //Defining ground data and representative period
  var points = pts1;//User may repeat this step for other dataframes (pt2, pt3, etc). Alternatively, the user can possibly run the entire dataset (pts_all)
  var start = "2017-01-01"; //Start of time period //Year/Month/Day/
  var end = "2017-12-31"; // End of time period
  
  // Creating a function to extract the quality assessment (QA) bits.
  var getQABits = function(image, start, end, newName) {
  // Computing the bits we need to extract.
  var pattern = 0;
  for (var i = start; i <= end; i++) {
  pattern += Math.pow(2, i);
  }
  // Returning a single band image of the extracted QA bits, with a new name.
  return image.select([0], [newName])
  .bitwiseAnd(pattern)
  .rightShift(start);
  };

  // Renaming spectral bands and quality bands.
  var M1_250bands = [ 'sur_refl_b01','sur_refl_b02', 'QC_250m'];
  var M1_250band_names = ['RED','NIR1','pixel_qa_250'];
  var M2_500bands = ['sur_refl_b03','sur_refl_b04','sur_refl_b05','sur_refl_b06','sur_refl_b07', 'QC_500m'];
  var M2_500band_names = ['BLUE','GREEN','NIR2','SWIR1','SWIR2','pixel_qa_500'];

  // Retaining a corrected product at ideal quality (CPPIQ) for M1_250.
  var M1maskCPPIQ = function(image) {
  // Identifying the quality band.
  var QA_CPPIQ = image.select('pixel_qa_250');
  // Identifying the appropriate bitmask values.
  var BitCPPIQ = getQABits(QA_CPPIQ, 0, 1, 'CPPIQ').expression("b(0) == 0 ");
  image = image.addBands(BitCPPIQ);
  // Excluding pixels that are not at ideal quality.
  return image.updateMask(BitCPPIQ.neq(0));
  };
  
  // Retaining a corrected product at ideal quality (CPPIQ) for M2_500.
  var M2maskCPPIQ = function(image) {
  // Identifying the quality band.
  var QA_CPPIQ = image.select('pixel_qa_500');
  // Identifying the appropriate bitmask values.
  var BitCPPIQ = getQABits(QA_CPPIQ, 0, 1, 'CPPIQ').expression("b(0) == 0 ");
  image = image.addBands(BitCPPIQ);
  // Excluding pixels that are not at ideal quality.
  return image.updateMask(BitCPPIQ.neq(0));
  };
  
  // Retaining highest quality from band 1 (HQB1) for M1_250.
  var M1maskHQB1 = function(image) {
  // Identifying the quality band.
  var QA_HQB1 = image.select('pixel_qa_250');
  // Identifying the appropriate bitmask values.
  var BitHQB1 = getQABits(QA_HQB1, 4, 7, 'HQB1').expression("b(0) == 0 ");
  image = image.addBands(BitHQB1);
  // Excluding pixels that are not at ideal quality.
  return image.updateMask(BitHQB1.neq(0));
  };
  
  // Retaining highest quality from band 2 (HQB2) for M1_250.
  var M1maskHQB2 = function(image) {
  // Identifying the quality band.
  var QA_HQB2 = image.select('pixel_qa_250');
  // Identifying the appropriate bitmask values.
  var BitHQB2 = getQABits(QA_HQB2, 8, 11, 'HQB2').expression("b(0) == 0 ");
  image = image.addBands(BitHQB2);
  // Excluding pixels that are not at ideal quality.
  return image.updateMask(BitHQB2.neq(0));
  };
  
  // Retaining highest quality from band 3 (HQB3) for M1_250.
  var M2maskHQB3= function(image) {
  // Identifying the quality band.
  var QA_HQB3 = image.select('pixel_qa_500');
  // Identifying the appropriate bitmask values.
  var BitHQB3 = getQABits(QA_HQB3, 10, 13, 'HQB3').expression("b(0) == 0 ");
  image = image.addBands(BitHQB3);
  // Excluding pixels that are not at ideal quality.
  return image.updateMask(BitHQB3.neq(0));
  };
  
  // Retaining highest quality from band 4 (HQB4) for M2_500.
  var M2maskHQB4 = function(image) {
  // Identifying the quality band.
  var QA_HQB4 = image.select('pixel_qa_500');
  // Identifying the appropriate bitmask values.
  var BitHQB4 = getQABits(QA_HQB4, 14, 17, 'HQB4').expression("b(0) == 0 ");
  image = image.addBands(BitHQB4);
  return image.updateMask(BitHQB4.neq(0));
  };
  
  // Retaining highest quality from band 5 (HQB5) for M2_500.
  var M2maskHQB5 = function(image) {
  // Identifying the quality band.
  var QA_HQB5 = image.select('pixel_qa_500');
  // Identifying the appropriate bitmask values.
  var BitHQB5 = getQABits(QA_HQB5, 18, 21, 'HQB5').expression("b(0) == 0 ");
  image = image.addBands(BitHQB5);
  return image.updateMask(BitHQB5.neq(0));
  };
  
  // Retaining highest quality from band 6 (HQB6) for M2_500.
  var M2maskHQB6 = function(image) {
  // Identifying the quality band.
  var QA_HQB6 = image.select('pixel_qa_500');
  // Identifying the appropriate bitmask values.
  var BitHQB6 = getQABits(QA_HQB6, 22, 25, 'HQB6').expression("b(0) == 0 ");
  image = image.addBands(BitHQB6);
  return image.updateMask(BitHQB6.neq(0));
  };
  
  // Retaining highest quality from band 7 (HQB7) for M2_500.
  var M2maskHQB7 = function(image) {
  // Identifying the quality band.
  var QA_HQB7 = image.select('pixel_qa_500');
  // Identifying the appropriate bitmask values.
  var BitHQB7 = getQABits(QA_HQB7, 26, 29, 'HQB7').expression("b(0) == 0 ");
  image = image.addBands(BitHQB7);
  return image.updateMask(BitHQB7.neq(0));
  };
  
  // Creating a mask to exclude missing input, noisy and dead detector pixels from band 1 (NDB1) for M1_250.
  var M1maskNDB1 = function(image) {
  // Identifying the quality band.
  var QA_NDB1 = image.select('pixel_qa_250');
  // Identifying the appropriate bitmask values.
  var BitNDB1 = getQABits(QA_NDB1, 5, 7, 'NDB1').expression("b(0) == 7 || b(0) == 8|| b(0) == 11");
  image = image.addBands(BitNDB1);
  // Including pixels without anomalies
  return image.updateMask(BitNDB1.eq(0));
  };
  
  // Creating a mask to exclude missing input, noisy and dead detector pixels from band 2 (NDB2) for M1_250.
  var M1maskNDB2 = function(image) {
  // Identifying the quality band.
  var QA_NDB2 = image.select('pixel_qa_250');
  // Identifying the appropriate bitmask values.
  var BitNDB2 = getQABits(QA_NDB2, 8, 11, 'NDB2').expression("b(0) == 7 || b(0) == 8|| b(0) == 11");
  image = image.addBands(BitNDB2);
  // Including pixels without anomalies
  return image.updateMask(BitNDB2.eq(0));
  };
  
  // Creating a mask to exclude missing input, noisy and dead detector pixels from band 3 (NDB3) for M2_500.
  var M2maskNDB3 = function(image) {
  // Identifying the quality band.
  var QA_NDB3 = image.select('pixel_qa_500');
  // Identifying the appropriate bitmask values.
  var BitNDB3 = getQABits(QA_NDB3, 10, 13, 'NDB3').expression("b(0) == 7 || b(0) == 8|| b(0) == 11");
  image = image.addBands(BitNDB3);
  // Including pixels without anomalies
  return image.updateMask(BitNDB3.eq(0));
  };
  
  // Creating a mask to exclude missing input, noisy and dead detector pixels from band 4 (NDB4) for M2_500.
  var M2maskNDB4 = function(image) {
  // Identifying the quality band.
  var QA_NDB4 = image.select('pixel_qa_500');
  // Identifying the appropriate bitmask values.
  var BitNDB4 = getQABits(QA_NDB4, 14, 17, 'NDB4').expression("b(0) == 7 || b(0) == 8|| b(0) == 11");
  image = image.addBands(BitNDB4);
  // Including pixels without anomalies
  return image.updateMask(BitNDB4.eq(0));
  };
  
  // Creating a mask to exclude missing input, noisy and dead detector pixels from band 5 (NDB5) for M2_500.
  var M2maskNDB5 = function(image) {
  // Identifying the quality band.
  var QA_NDB5 = image.select('pixel_qa_500');
  // Identifying the appropriate bitmask values.
  var BitNDB5 = getQABits(QA_NDB5, 18, 21, 'NDB5').expression("b(0) == 7 || b(0) == 8|| b(0) == 11");
  image = image.addBands(BitNDB5);
  // Including pixels without anomalies
  return image.updateMask(BitNDB5.eq(0));
  };
  
  // Creating a mask to exclude missing input, noisy and dead detector pixels from band 6 (NDB6) for M2_500.
  var M2maskNDB6 = function(image) {
  // Identifying the quality band.
  var QA_NDB6 = image.select('pixel_qa_500');
  // Identifying the appropriate bitmask values.
  var BitNDB6 = getQABits(QA_NDB6, 22, 25, 'NDB6').expression("b(0) == 7 || b(0) == 8|| b(0) == 11");
  image = image.addBands(BitNDB6);
  // Including pixels without anomalies
  return image.updateMask(BitNDB6.eq(0));
  };
  
  // Creating a mask to exclude missing input, noisy and dead detector pixels from band 7 (NDB7) for M2_500.
  var M2maskNDB7 = function(image) {
  // Identifying the quality band.
  var QA_NDB7 = image.select('pixel_qa_500');
  // Identifying the appropriate bitmask values.
  var BitNDB7 = getQABits(QA_NDB7, 26, 29, 'NDB7').expression("b(0) == 7 || b(0) == 8|| b(0) == 11");
  image = image.addBands(BitNDB7);
  // Including pixels without anomalies
  return image.updateMask(BitNDB7.eq(0));
  };
  
  // Creating a mask to include pixels with atmospheric correction (ATMP) for M1_250.
  var M1maskATMP = function(image) {
  // Identifying the quality band.
  var QA_ATMP = image.select('pixel_qa_250');
  // Identifying the appropriate bitmask values.
  var BitATMP = getQABits(QA_ATMP, 12, 12, 'ATMP').expression("b(0) == 0");
  image = image.addBands(BitATMP);
  // Including pixels with atmospheric correction performed.
  return image.updateMask(BitATMP.eq(0));
  };
  
  // Creating a mask to include pixels with atmospheric correction (ATMP) for M2_500.
  var M2maskATMP = function(image) {
  // Identifying the quality band.
  var QA_ATMP = image.select('pixel_qa_500');
  // Identifying the appropriate bitmask values.
  var BitATMP = getQABits(QA_ATMP, 30, 30, 'ATMP').expression("b(0) == 0");
  image = image.addBands(BitATMP);
  // Including pixels with atmospheric correction performed.
  return image.updateMask(BitATMP.eq(0));
  };
  
  // Creating a fucntion to apply scaling factors to switch from Digital Number (DN) to reflectance data
  function applyScaleFactors(image) {
  var opticalBands = image.select(['RED','NIR1', 'BLUE','GREEN','NIR2','SWIR1','SWIR2']).multiply(0.0001);
  return image.addBands(opticalBands, null, true);
  }
  
  // Definining the period, as well as the area where restrict each remote sensing data collection. 
  // Getting the multispectral imagery dataset within the selected period for the collections MODIS1 (250m) and MODIS2 (500m), while renaming bands.
  var M1filtered = M1_250.filterDate(start, end).select(M1_250bands, M1_250band_names).map(function(img){return img.clip(Area)});
  var M2filtered = M2_500.filterDate(start, end).select(M2_500bands, M2_500band_names).map(function(img){return img.clip(Area)});
  
  // Masking out areas with low quality pixels
  var M1HighQuality_Areas = M1filtered.map(M1maskCPPIQ).map(M1maskHQB1).map(M1maskHQB2).map(M1maskNDB1)
                          .map(M1maskNDB2).map(M1maskATMP);
  var M2HighQuality_Areas = M2filtered.map(M2maskCPPIQ).map(M2maskHQB3).map(M2maskHQB4).map(M2maskHQB5)
                          .map(M2maskHQB6).map(M2maskHQB7).map(M2maskNDB3).map(M2maskNDB4).map(M2maskNDB5)
                          .map(M2maskNDB6).map(M2maskNDB7).map(M2maskATMP);
  
  // Creating a function to resample MODIS2 (500m) collection to the native scale of MODIS1 collection (250m)                 
  var resample = function (image){
  return image.resample('bilinear').reproject({
  crs: M1HighQuality_Areas.first().projection().crs(),
  scale: 250
  })};
  var M2HighQuality_Areas = M2HighQuality_Areas.map(resample);
  
  // Combining the two MODIS collections
  var HighQuality_Areas = ee.ImageCollection(M1HighQuality_Areas.combine(M2HighQuality_Areas));
  
   // Apply scaling factors
  var HighQuality_Areas = HighQuality_Areas.map(applyScaleFactors);
  
  // First check of image collection.
  print('First check of image collection:',HighQuality_Areas);
  
  // Getting the number of images.
  var count = HighQuality_Areas.size();
  
  print('Count: ', count);
  
  // Getting the date range of images in the collection.
  var range = HighQuality_Areas.reduceColumns(ee.Reducer.minMax(), ["system:time_start"]);
  
  print('Date range: ', ee.Date(range.get('min')), ee.Date(range.get('max')));

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Sub-step 2: Calculate Spectral Metrics.

  // Defining the formulas.
  
  // Creating a function to with all formulas to calculate for MODIS. 
  var compute_metrics = function(image) {
    
  // Defining the NDVI formula.
  var ndvi = image.normalizedDifference(['NIR1', 'RED']).rename('NDVI');
  
  // Defining the EVI2 formula.
  var evi2 = image.select('NIR1').subtract(image.select('RED')).divide(image.select('NIR1')
  .add(image.select('RED')).add(1)).multiply(2.4).rename('EVI2');
  
  // Defining the MSAVI2 formula.
  var msavi2  = image.select('NIR1').multiply(2).add(1).subtract(image.select('NIR1').
  multiply(2).add(1).pow(2).subtract(image.select('NIR1').subtract(image.select('RED')).
  multiply(8)).sqrt()).divide(2).rename('MSAVI2');
  
  // Defining the NDWI formula.
  var ndwi = image.normalizedDifference(['NIR1', 'NIR2']).rename('NDWI');
  
  // Defining the PSRI formula.
  var psri = image.select('RED').subtract(image.select('GREEN')).divide(image.select('NIR1')).rename('PSRI');
  
  // Defining the NBR formula.
  var nbr = image.normalizedDifference(['NIR1','SWIR2']).rename('NBR');
  
  // Aggregating the calculated bands.
  return image.addBands(ndvi).addBands(ndvi).addBands(evi2).addBands(msavi2).addBands(ndwi).addBands(psri).addBands(nbr);
  };

  // Computing and integrating the metrics within the collection.
  var Spectral_Metrics = HighQuality_Areas.map(compute_metrics);
  
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Sub-step 3: Apply spatial and temporal scales on calculate metrics for ground-data extraction. 

  // Applying spatial scales
  // Creating a function to apply (square) Moving Windows to computed metrics, utilising mean as pixel aggregating formula.
  var addTexture_3X3_Mean = function(image) {
  var texture = image.select(['RED','NIR1','BLUE','GREEN','NIR2','SWIR1','SWIR2','NDVI','EVI2','MSAVI2','NDWI','PSRI','NBR']).reduceNeighborhood({
  // Defining the aggregating formula (i.e, mean)
  reducer: ee.Reducer.mean().unweighted(),
  // Defining the shape for Moving Windows (i.e, square or round) and size (e.g., 3)
  kernel: ee.Kernel.square(3),
  // Renaming the calculated metrics and returning as bands to the collection
  }).rename(['RED_3S_Mn','NIR1_3S_Mn','BLUE_3S_Mn','GREEN_3S_Mn','NIR2_3S_Mn','SWIR1_3S_Mn','SWIR2_3S_Mn','NDVI_3S_Mn','EVI2_3S_Mn','MSAVI2_3S_Mn',
  'NDWI_3S_Mn','PSRI_3S_Mn','NBR_3S_Mn']);
  return image.addBands(texture.add(ee.Image(0.0)));
  };
  
  // Creating a function to apply (square) Moving Windows to computed metrics, utilising standard deviation as pixel aggregating formula.
  var addTexture_3X3_stdDev = function(image) {
  var texture = image.select(['RED','NIR1','BLUE','GREEN','NIR2','SWIR1','SWIR2','NDVI','EVI2','MSAVI2','NDWI','PSRI','NBR']).reduceNeighborhood({
  // Defining the aggregating formula (i.e, standard deviation)
  reducer: ee.Reducer.stdDev().unweighted(),
  // Defining the shape for Moving Windows ((e.g., square or round) and size (e.g., 3)
  kernel: ee.Kernel.square(3),
  // Renaming the calculated metrics and returning as bands to the collection
  }).rename(['RED_3S_Sd','NIR1_3S_Sd','BLUE_3S_Sd','GREEN_3S_Sd','NIR2_3S_Sd','SWIR1_3S_Sd','SWIR2_3S_Sd','NDVI_3S_Sd','EVI2_3S_Sd','MSAVI2_3S_Sd',
  'NDWI_3S_Sd','PSRI_3S_Sd','NBR_3S_Sd']);
  return image.addBands(texture.add(ee.Image(0.0)));
  };
  
  //Integrating the new calculated metrics within the original collection.
  var Spectral_Metrics_MnSd = Spectral_Metrics.map(addTexture_3X3_Mean).map(addTexture_3X3_stdDev);
  
  // Calculating the gray-level co-occurrence matrix (GLCM), for NDVI.
  var NDVI_GLCM16bit = Spectral_Metrics_MnSd.select('NDVI')
  .map (function (image) {
  var glcm = image.multiply(512).uint8().glcmTexture(3, ee.Kernel.square(3,'pixels', true)).float().divide(512);
  return image.addBands(glcm);
  });
  
  // Integrating the textural metrics within the collection.
  var Spectral_Metrics = ee.ImageCollection(NDVI_GLCM16bit.combine(Spectral_Metrics_MnSd));
  var Spectral_Metrics = Spectral_Metrics.copyProperties(Spectral_Metrics_MnSd, Spectral_Metrics_MnSd.propertyNames());
  var Spectral_Metrics = ee.ImageCollection(Spectral_Metrics);
  
  // Calling the variable names
  var varbands = ['RED','NIR1','BLUE','GREEN','NIR2','SWIR1','SWIR2','NDVI','EVI2','MSAVI2','NDWI','PSRI','NBR',
  'RED_3S_Mn','NIR1_3S_Mn','BLUE_3S_Mn','GREEN_3S_Mn','NIR2_3S_Mn','SWIR1_3S_Mn','SWIR2_3S_Mn','NDVI_3S_Mn','EVI2_3S_Mn','MSAVI2_3S_Mn',
  'NDWI_3S_Mn','PSRI_3S_Mn','NBR_3S_Mn',
  'RED_3S_Sd','NIR1_3S_Sd','BLUE_3S_Sd','GREEN_3S_Sd','NIR2_3S_Sd','SWIR1_3S_Sd','SWIR2_3S_Sd','NDVI_3S_Sd','EVI2_3S_Sd','MSAVI2_3S_Sd',
  'NDWI_3S_Sd','PSRI_3S_Sd','NBR_3S_Sd',
  'NDVI_savg', 'NDVI_svar',
  'NDVI_idm','NDVI_corr'];
  
  // Selecting words to rename up to 10 characters due to column heading limits in the final Spatial Point Data Frame
  var varband_names = ['RED','NIR1','BLUE','GREEN','NIR2','SWIR1','SWIR2','NDVI','EVI2','MSAVI2','NDWI','PSRI','NBR',
  'RED_3M','NIR1_3M','BLUE_3M','GREEN_3M','NIR2_3M','SWIR1_3M','SWIR2_3M','NDVI_3M','EVI2_3M','MSAVI2_3M',
  'NDWI_3M','PSRI_3M','NBR_3M',
  'RED_3S','NIR1_3S','BLUE_3S','GREEN_3S','NIR2_3S','SWIR1_3S','SWIR2_3S','NDVI_3S','EVI2_3S','MSAVI2_3S',
  'NDWI_3S','PSRI_3S','NBR_3S',
  'GLCM_M', 'GLCM_V', 
  'GLCM_H','GLCM_C'];
  
  // Renaming the Spectral Bands, Spectral Metrics, and Texture variables.
  var Spectral_Metrics = Spectral_Metrics.select(varbands, varband_names);
  
  print('Second check of image collection:', Spectral_Metrics);
  

  // Depicting a variable as an example (e.g., MSAVI2).
  //var msavi2 = Spectral_Metrics.select('MSAVI2');
  // Reducing the collection with a median reducer.
  //var msavi2 = msavi2.reduce(ee.Reducer.median());
  // Cliggping within the study area
  //var msavi2_clipped = msavi2.clip(Area);
  // Selectign a palette.
  //var palette = ['FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718',
  //             '74A901', '66A000', '529400', '3E8601', '207401', '056201',
  //             '004C00', '023B01', '012E01', '011D01', '011301'];
               
  //Map.addLayer(msavi2_clipped, {bands: 'MSAVI2_median', min:0, max:1,palette: palette}, 'MSAVI2');

  // Applying temporal scales
  // First is required to filter the image colletion with a ground-base Spatial-Points-Dataframe (or Spatial-Polygons-Dataframe, or Spatial-Lines-Dataframe)
  // The filtering process rely on the temporal resolution of the time step (or time stamp) within the ground-based dataset.
  
  // Creating an object with spatio-temporally extracted information from groun-data
  var ExtractedPoints = points.map(function(feature){
  
  // Identifying the date associated to each ground observation.
  var date = ee.Number(feature.get('timestamp2'));
  
  // Calling the temporal information in a legible format (e.g., YYYY/MM/dd). 
  // Others legible formats can be found here: https://developers.google.com/earth-engine/apidocs/ee-date-parse
  date = ee.Date.parse('YYYY/MM/dd', date);
  
  // Determining the size of Moving Windows for temporally scaling remotely sensed information from each time of observation.
  var startTempWind = date.advance(-1,'days');
  var endTempWind = date.advance(1,'days');
  
  // Selecting the aggregating formula (e.g., mean or standard deviation)
  var FiltTempWind = Spectral_Metrics.filterDate(startTempWind, endTempWind).mean();
  
  // Extracting the remotely sensed information using the geometry feature                   
  var data = FiltTempWind.reduceRegion(ee.Reducer.mean(), feature.geometry(), 250);
  
  return ee.Feature(feature.setMulti(data));
  });
  
  // Merging the extracted information with the original Spatial Dataframe
  // Calling the original Spatial Dataframe.
  var OriginalSpatialPointsDataframe = points;
  
  // Calling the extracted Spatial Dataframe.
  var ExtractedSpatialPointsDataframe = ee.FeatureCollection(ExtractedPoints);
  
  // Defining the matching field between the two collections.
  var JoinFilter = ee.Filter.equals({
  leftField: 'ID',
  rightField: 'ID'
  });
  
  // Defining the "join" parameter.
  var ParJoin = ee.Join.inner('primary', 'secondary');
  
  // Applying the parameter to concatenate the two collections.
  var DataframeJoin = ParJoin.apply(OriginalSpatialPointsDataframe, ExtractedSpatialPointsDataframe,  JoinFilter);
  
  // Creating a function to collapse the Extracted Spatial Dataframe into the Original Spatial Dataframe.
  function CollapsJoin(feature){
  return ee.Feature(feature.get('primary')).copyProperties(feature.get('secondary'));
  }
  
  // Applying the collapse function.
  var DataframeJoin = DataframeJoin.map(CollapsJoin);
  
  print('Check the first row of the SpatialPointsDataframe:', DataframeJoin.first());
  
  // Exporting the Spatial Dataframe to a SHP file.
  Export.table.toDrive({
  collection: DataframeJoin,
  description:'MODIS_PA_Multispectral_2017',
  fileFormat: 'SHP',
  });
  
  //Alternatively, the user can indicate specific metrics to write
  //Export.table.toDrive({
  //collection: DataframeJoin,
  //description:'PA_Multispectral_2017',
  //fileFormat: 'SHP',
  //selectors: ['RED','NIR1','BLUE','GREEN','NIR2','SWIR1','SWIR2','NDVI','EVI2','MSAVI2','NDWI','PSRI','NBR',
  //'RED_3M','NIR1_3M','BLUE_3M','GREEN_3M','NIR2_3M','SWIR1_3M','SWIR2_3M','NDVI_3M','EVI2_3M','MSAVI2_3M',
  //'NDWI_3M','PSRI_3M','NBR_3M',
  //'RED_3S','NIR1_3S','BLUE_3S','GREEN_3S','NIR2_3S','SWIR1_3S','SWIR2_3S','NDVI_3S','EVI2_3S','MSAVI2_3S',
  //'NDWI_3S','PSRI_3S','NBR_3S',
  //'GLCM_M', 'GLCM_V', 
  //'GLCM_H','GLCM_C',
  //'ID','type','ind_ident','timestamp','timestamp2']
  //});
