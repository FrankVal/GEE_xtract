// The GEE_extract code prepared for extracting data from Landsat satellites

// The code is organised into three sub-steps: 

// * The first sub-step concerns the retention and pre-processing of the available images, to avoid anomalous pixels, 
//  softening uncertainties and retaining high quality pixels

// * The second sub-step shows how to calculate spectral metrics for each available multispectral image of the time-series

// * The third sub-step demonstrates how to apply spatial and temporal scales along the time-series, then to extract remotely sensed information from ground data.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Sub-step 1: Data filtering

  // The user can select Landsat collections (https://developers.google.com/earth-engine/datasets/catalog/landsat), 
  // here the Landsat 4 (L4), Landsat 5 (L5), and Landsat 8(L8), with native spectral bands
  var L4 = ee.ImageCollection("LANDSAT/LT04/C02/T1_L2"),
  L5 = ee.ImageCollection("LANDSAT/LT05/C02/T1_L2"),
  L8 = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2"),
    
  // Then, the user should select a ground-data vector, as well study area polygon, that need to be imported within the Earth Engine Code Editor (EECE), 
  // as asset through the Asset Manager (https://developers.google.com/earth-engine/guides/asset_manager)
  
  Abs = ee.FeatureCollection("users/valeriofrank/GEE_xtract/0Abs"), // Useful here only for depiction purpouse
  Pre = ee.FeatureCollection("users/valeriofrank/GEE_xtract/1Pre"), // Useful here only for depiction purpouse
  pts1 = ee.FeatureCollection("users/valeriofrank/GEE_xtract/Ground_Observations_2017"),
  pts2 = ee.FeatureCollection("users/valeriofrank/GEE_xtract/Ground_Observations_2018"), //The ground-data vector used as example for extraction
  pts3 = ee.FeatureCollection("users/valeriofrank/GEE_xtract/Ground_Observations_2019"),
  pts4 = ee.FeatureCollection("users/valeriofrank/GEE_xtract/Ground_Observations_2020"),
  pts5 = ee.FeatureCollection("users/valeriofrank/GEE_xtract/Ground_Observations_2021"),
  pts_all = ee.FeatureCollection("users/valeriofrank/GEE_xtract/Ground_Observations_All_2017_2021"),
  
  Area = ee.FeatureCollection("users/valeriofrank/GEE_xtract/Study_Area"); //The study area vector used as example
    
  // Here the user can specify the ground data vector (e.g., pts2) as an object and select the period considered for the time-series
  // These objects are depicted here to allow for quick parameter changes when extracting data from multiple datasets representing different periods
  var points = pts2;//Users may repeat this step for other dataframes (pt1, pt3, etc), which are separated by year
                    //Alternatively, they can possibly run the entire dataset (pts_all)
  var start = "2018-01-01"; //Start of time period (Year-Month-Day)
  var end = "2018-12-31"; // End of time period
  
  // A constructor (getQABits) incorporating a function to extract the quality assessment (QA) bits
  var getQABits = function(image, start, end, newName) {
  // Computing the bits users need to extract.
  var pattern = 0;
  for (var i = start; i <= end; i++) {
  pattern += Math.pow(2, i);
  }
  
  // Returning a single band image of the extracted QA bits
  return image.select([0], [newName])
  .bitwiseAnd(pattern)
  .rightShift(start);
  };
  
  // Users need to rename bands before merging collections of Landsat sensors (4,5,8)
  var bands = ['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5','SR_B7', 'SR_B6', 'pixel_qa'];
  var band_names = ['BLUE', 'GREEN', 'RED', 'NIR1', 'SWIR1', 'SWIR2', 'T','pixel_qa'];
  var l8bands = ['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7', 'SR_B1','QA_PIXEL'];
  var l8band_names = ['BLUE', 'GREEN', 'RED', 'NIR1', 'SWIR1', 'SWIR2', 'UB', 'pixel_qa'];
  
  // Masks preparation
  // A constructor (maskClouds) incorporating a mask function to retain pixels without clouds
  var maskClouds = function(image) {
  // Here the users can indentify the quality band for each imagery
  var QA_Clouds = image.select('pixel_qa');
  // This identifies the appropriate bitmask values during mask application
  var BitClouds = getQABits(QA_Clouds, 3, 3, 'Clouds').expression("b(0) == 0");
  image = image.addBands(BitClouds);
  // Mask application
  return image.updateMask(BitClouds.neq(0));
  };
  
  // A constructor (maskClouds) incorporating a mask function to retain pixels without shadows
  var maskCloud_shadow = function(image) {
  // Here the users can indentify the quality band for each imagery
  var QA_Cloud_shadow = image.select('pixel_qa');
  // This identifies the appropriate bitmask values during mask application
  var BitCloud_shadow = getQABits(QA_Cloud_shadow, 4, 4, 'Cloud shadows').expression("b(0) == 0");
  image = image.addBands(BitCloud_shadow);
  // Mask application
  return image.updateMask(BitCloud_shadow.neq(0));
  };
  
  // A constructor (maskSnow) incorporating a mask function to retain pixels without snow elements
  var maskSnow = function(image) {
  // Here the users can indentify the quality band for each imagery
  var QA_Snow = image.select('pixel_qa');
  // This identifies the appropriate bitmask values during mask application
  var BitSnow = getQABits(QA_Snow, 5, 5, 'Snow').expression("b(0) == 0");
  image = image.addBands(BitSnow);
  // Mask application
  return image.updateMask(BitSnow.neq(0));
  };
  
  // A constructor (maskWater) incorporating a mask function to retain pixels without water elements
  var maskWater = function(image) {
  // Here the users can indentify the quality band for each imagery
  var QA_Water = image.select('pixel_qa');
  // This identifies the appropriate bitmask values during mask application
  var BitWater = getQABits(QA_Water, 7, 7, 'Water').expression("b(0) == 0");
  image = image.addBands(BitWater);
  // Mask application
  return image.updateMask(BitWater.neq(0));
  };
  
  // A constructor (maskCloud_conf) incorporating a mask function to retain pixels without high cloud confidence
  var maskCloud_conf = function(image) {
  // Here the users can indentify the quality band for each imagery
  var QA_Cloud_conf = image.select('pixel_qa');
  // This identifies the appropriate bitmask values during mask application
  var Bit_Cloud_conf = getQABits(QA_Cloud_conf, 8, 9, 'Cloud Confidence').expression("b(0) > 1");
  image = image.addBands(Bit_Cloud_conf);
  // Mask application
  return image.updateMask(Bit_Cloud_conf.eq(0));
  };
  
  // A constructor (maskCloud_conf) incorporating a mask function to retain pixels without high shadows confidence
  var maskShadow_conf = function(image) {
  // Here the users can indentify the quality band for each imagery
  var QA_Shadow_conf = image.select('pixel_qa');
  // This identifies the appropriate bitmask values during mask application
  var Bit_Shadow_conf = getQABits(QA_Shadow_conf, 10, 11, 'Shadow Confidence').expression("b(0) > 1");
  image = image.addBands(Bit_Shadow_conf);
  // Mask application
  return image.updateMask(Bit_Shadow_conf.eq(0));
  };
  
  // A constructor (maskSnow_ice_conf) incorporating a mask function to retain pixels without high snow confidence
  var maskSnow_ice_conf = function(image) {
  // Here the users can indentify the quality band for each imagery
  var QA_Snow_ice_conf = image.select('pixel_qa');
  // This identifies the appropriate bitmask values during mask application
  var Bit_Snow_ice_conf = getQABits(QA_Snow_ice_conf, 12, 13, 'Snow/Ice Confidence').expression("b(0) > 1");
  image = image.addBands(Bit_Snow_ice_conf);
  // Mask application
  return image.updateMask(Bit_Snow_ice_conf.eq(0));
  };
  
  // A constructor (maskCirrus_conf) incorporating a mask function to retain pixels without high cirrus confidence
  var maskCirrus_conf = function(image) {
  // Here the users can indentify the quality band from each imagery
  var QA_Cirrus_conf = image.select('pixel_qa');
  // This identifies the appropriate bitmask values during mask application
  var Bit_Cirrus_conf = getQABits(QA_Cirrus_conf, 14, 15, 'Cirrus Confidence').expression("b(0) > 1");
  image = image.addBands(Bit_Cirrus_conf);
  // Mask application
  return image.updateMask(Bit_Cirrus_conf.eq(0));
  };

  // This function applies scaling factors
  function applyScaleFactors(image) {
  var opticalBands = image.select(['BLUE', 'GREEN', 'RED', 'NIR1', 'SWIR1', 'SWIR2']).multiply(0.0000275).add(-0.2);
  return image.addBands(opticalBands, null, true);
  }
  
  // A constructor (l8_harmonize) incorporating a function that harmonises the surface reflectance values of Landsat 8 
  // with those of other Landsat satellites, using coefficients from Roy et al. 2016
  // https://doi.org/10.1016/j.rse.2015.12.024
  var l8_harmonize = function(l8img){
  var b = ee.Image(0.0183).add(ee.Image(0.8850).multiply(l8img.select('BLUE'))).int16();
  var g = ee.Image(0.0123).add(ee.Image(0.9317).multiply(l8img.select('GREEN'))).int16();
  var r = ee.Image(0.0123).add(ee.Image(0.9372).multiply(l8img.select('RED'))).int16();
  var nir = ee.Image(0.0448).add(ee.Image(0.8339).multiply(l8img.select('NIR1'))).int16();
  var swir1 = ee.Image(0.0306).add(ee.Image(0.8639).multiply(l8img.select('SWIR1'))).int16();
  var swir2 = ee.Image(0.0116).add(ee.Image(0.9165).multiply(l8img.select('SWIR2'))).int16();
  var out = ee.Image(b.addBands(g).addBands(r).addBands(nir).addBands(swir1).addBands(swir2)
  .addBands(l8img.select(['UB', 'pixel_qa'])).copyProperties(l8img, l8img.propertyNames())).rename(l8band_names);
  return out;
  };

  // A function to aggregate image collections according to their acquisition time
  function mosaicBy(imcol){
  var imlist = imcol.toList(imcol.size());
  var unique_dates = imlist.map(function(im){
  return ee.Image(im).date().format("YYYY-MM-dd");
  }).distinct();
  var mosaic_imlist = unique_dates.map(function(d){
  d = ee.Date(d);
  var im = imcol
  .filterDate(d, d.advance(1, "day"))
  .mosaic();
  return im.set(
  "system:time_start", d.millis(), 
  "system:id", d.format("YYYY-MM-dd"));
  });
  return ee.ImageCollection(mosaic_imlist);
  }

  // Here the users should define the period, as well as the area where restrict remote sensing data collections
  
  // The Landsat 4 multispectral bands are renamed, the collection is filtered according to the selected period, to a geographical extent,
  // and is cut to the study area
  var l4 = ee.ImageCollection(L4).select(bands, band_names).filterDate(start, end).filterBounds(Area)
  .map(function(img){return img.clip(Area)});
  //var l4 = mosaicBy(l4); //User should use the data aggregation function (mosaicBy) only when study period reflect Landsat 4 lifespan
  
  // The Landsat 5 multispectral bands are renamed, the collection is filtered according to the selected period, to a geographical extent,
  // and is cut to the study area
  var l5 = ee.ImageCollection(L5).select(bands, band_names).filterDate(start, end).filterBounds(Area)
  .map(function(img){return img.clip(Area)});
  //var l5 = mosaicBy(l5); //User should use the data aggregation function (mosaicBy) only when study period reflect Landsat 5 lifespan
  
  // The Landsat 8 multispectral bands are renamed, the collection is filtered according to the selected period, to a geographical extent,
  // and is cut to the study area
  var l8 = ee.ImageCollection(L8).select(l8bands, l8band_names).filterDate(start, end).filterBounds(Area)
  .map(function(img){return img.clip(Area)});
  var l8 = mosaicBy(l8); //User should use the data aggregation function (mosaicBy) only when study period reflect Landsat 8 lifespan
  
  // The harmonisation function (l8_harmonize) may be applied
  var l8h = l8.map(l8_harmonize);
  
  // The three Landsat collections are combined with harmonized band names and spectral properties
  var landsat_raw = ee.ImageCollection(l4.merge(l5).merge(l8)).select(['BLUE', 'GREEN', 'RED', 'NIR1', 'SWIR1', 'SWIR2', 'pixel_qa']);
  
  // Once combined, users can apply scaling factors to switch from Digital Number (DN) to reflectance data
  var landsat_raw = landsat_raw.map(applyScaleFactors);
  
  // Now the entire collection may be masked to filter out low quality pixels
  var HighQuality_Areas = landsat_raw.map(maskClouds).map(maskCloud_shadow).map(maskSnow).map(maskWater).map(maskCloud_conf)
                           .map(maskShadow_conf).map(maskSnow_ice_conf).map(maskCirrus_conf);
                           
  // First check of image collection
  print('First check of image collection:',HighQuality_Areas);
  
  // Getting the number of images
  var count = HighQuality_Areas.size();
  print('Count: ', count);
  
  // Getting the date range of images in the collection
  var range = HighQuality_Areas.reduceColumns(ee.Reducer.minMax(), ["system:time_start"]);
  print('Date range: ', ee.Date(range.get('min')), ee.Date(range.get('max')));

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Sub-step 2: Metrics calculation

  // Users need to define the formula prior metrics calculation
  
  // A constructor (compute_metrics) incorporating a function to calculate metrics for Landsat
  var compute_metrics = function(image) {
  
  // Defining the NDVI formula
  var ndvi = image.normalizedDifference(['NIR1', 'RED']).rename('NDVI');
  
  // Defining the EVI2 formula
  var evi2 = image.select('NIR1').subtract(image.select('RED')).divide(image.select('NIR1').add(image.select('RED')).add(1)).multiply(2.4).rename('EVI2');
  
  // Defining the MSAVI2 formula
  var msavi2  = image.select('NIR1').multiply(2).add(1).subtract(image.select('NIR1').
  multiply(2).add(1).pow(2).subtract(image.select('NIR1').subtract(image.select('RED')).
  multiply(8)).sqrt()).divide(2).rename('MSAVI2');
  
  // Defining the NDWI formula
  var ndwi = image.normalizedDifference(['NIR1', 'SWIR1']).rename('NDWI');
  
  // Defining the PSRI formula
  var psri = image.select('RED').subtract(image.select('GREEN')).divide(image.select('NIR1')).rename('PSRI');
  
  // Defining the NBR formula
  var nbr = image.normalizedDifference(['NIR1','SWIR2']).rename('NBR');

  // Metrics calculation
  return image.addBands(ndvi).addBands(ndvi).addBands(evi2).addBands(msavi2).addBands(ndwi).addBands(psri).addBands(nbr);
  };

  // Here, metrics are added to the entire collection
  var Spectral_Metrics = HighQuality_Areas.map(compute_metrics);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Sub-step 3: Data scaling

  // Users may define spatial and temporal scales on calculated metrics prior ground-data extraction
  
  // Spatial scaling
  
  // A constructor (addTexture_3X3_Mean) incorporating a scaling function that utilise Spatial Moving Windows of 3 pixels size, and a mean aggregating formula
  // Users may eventually change the name of the constuctor if they change some parameter (e.g., addTexture_6X6_Mean)
  var addTexture_3X3_Mean = function(image) {
  // Users may here define which metrics to scale
  var texture = image.select(['RED','NIR1','BLUE','GREEN','SWIR1','SWIR2','NDVI','EVI2','MSAVI2','NDWI','PSRI','NBR']).reduceNeighborhood({
  // Users may here define the type of aggregating formula (i.e, mean; https://developers.google.com/earth-engine/apidocs/ee-reducer-mean)
  // and the type of weight within spatial moving windows (https://developers.google.com/earth-engine/apidocs/ee-reducer-unweighted)
  reducer: ee.Reducer.mean().unweighted(),
  // Users may here define the shape of spatial moving windows (i.e, square or round;https://developers.google.com/earth-engine/apidocs/ee-kernel-circle)
  // and size (e.g., 3)
  kernel: ee.Kernel.circle(3),
  // Calculated metrics may be renamed
  }).rename(['RED_3S_Mn','NIR1_3S_Mn','BLUE_3S_Mn','GREEN_3S_Mn','SWIR1_3S_Mn','SWIR2_3S_Mn','NDVI_3S_Mn','EVI2_3S_Mn','MSAVI2_3S_Mn',
  'NDWI_3S_Mn','PSRI_3S_Mn','NBR_3S_Mn']);
  // Scaled metrics may be reutrned as new bands
  return image.addBands(texture.add(ee.Image(0.0)));
  };
   
  // A constructor (addTexture_3X3_stdDev) incorporating a scaling function that utilise Spatial Moving Windows of 3 pixels size, and a standard deviation aggregating formula
  // Users may eventually change the name of the constuctor if they change some parameter (e.g., addTexture_6X6_Mean)
  var addTexture_3X3_stdDev = function(image) {
  // Users may here define which metrics to scale
  var texture = image.select(['RED','NIR1','BLUE','GREEN','SWIR1','SWIR2','NDVI','EVI2','MSAVI2','NDWI','PSRI','NBR']).reduceNeighborhood({
  // Users may here define the type of aggregating formula (i.e, mean; https://developers.google.com/earth-engine/apidocs/ee-reducer-mean)
  // and the type of weight within spatial moving windows (https://developers.google.com/earth-engine/apidocs/ee-reducer-unweighted)
  reducer: ee.Reducer.stdDev().unweighted(),
  // Users may here define the shape of spatial moving windows (i.e, square or round;https://developers.google.com/earth-engine/apidocs/ee-kernel-circle)
  // and size (e.g., 3)
  kernel: ee.Kernel.circle(3),
  // Calculated metrics may be renamed
  }).rename(['RED_3S_Sd','NIR1_3S_Sd','BLUE_3S_Sd','GREEN_3S_Sd','SWIR1_3S_Sd','SWIR2_3S_Sd','NDVI_3S_Sd','EVI2_3S_Sd','MSAVI2_3S_Sd',
  'NDWI_3S_Sd','PSRI_3S_Sd','NBR_3S_Sd']);
  // Scaled metrics may be reutrned as new bands
  return image.addBands(texture.add(ee.Image(0.0)));
  };
  
  // Here, scaled metrics are added to the entire collection
  var Spectral_Metrics_MnSd = Spectral_Metrics.map(addTexture_3X3_Mean).map(addTexture_3X3_stdDev);
  
  // A constructor (NDVI_GLCM16bit) incorporating a scaling function that utilise Spatial Moving Windows of 3 pixels size, and gray level co-occurrence matrices as aggregating formulae 
  // Candidate metric to apply gray level co-occurrence matrices is commonly NDVI
  var NDVI_GLCM16bit = Spectral_Metrics_MnSd.select('NDVI')
  .map (function (image) {
  // Users may here define the textural variables (https://developers.google.com/earth-engine/apidocs/ee-image-glcmtexture)
  // the shape of spatial moving windows (i.e, square or round;https://developers.google.com/earth-engine/apidocs/ee-kernel-circle)
  // and size (e.g., 3)
  var glcm = image.multiply(512).uint8().glcmTexture(3, ee.Kernel.circle(3,'pixels', true)).float().divide(512);
  // Scaled metrics may be reutrned as new bands
  return image.addBands(glcm);
  });
  
  // Here, textural variables are added to the entire collection
  var Spectral_Metrics = ee.ImageCollection(NDVI_GLCM16bit.combine(Spectral_Metrics_MnSd));
  var Spectral_Metrics = Spectral_Metrics.copyProperties(Spectral_Metrics_MnSd, Spectral_Metrics_MnSd.propertyNames());
  var Spectral_Metrics = ee.ImageCollection(Spectral_Metrics);
  
  // Identify the variable calculated to retain within the collection
  var varbands = ['RED','NIR1','BLUE','GREEN','SWIR1','SWIR2','NDVI','EVI2','MSAVI2','NDWI','PSRI','NBR',
  'RED_3S_Mn','NIR1_3S_Mn','BLUE_3S_Mn','GREEN_3S_Mn','SWIR1_3S_Mn','SWIR2_3S_Mn','NDVI_3S_Mn','EVI2_3S_Mn','MSAVI2_3S_Mn',
  'NDWI_3S_Mn','PSRI_3S_Mn','NBR_3S_Mn',
  'RED_3S_Sd','NIR1_3S_Sd','BLUE_3S_Sd','GREEN_3S_Sd','SWIR1_3S_Sd','SWIR2_3S_Sd','NDVI_3S_Sd','EVI2_3S_Sd','MSAVI2_3S_Sd',
  'NDWI_3S_Sd','PSRI_3S_Sd','NBR_3S_Sd',
  'NDVI_savg', 'NDVI_svar',
  'NDVI_idm','NDVI_corr'];
  
  // Selecting words to rename such variables, up to 10 characters due to column heading limits in the final Spatial Point Data Frame
  var varband_names = ['RED','NIR1','BLUE','GREEN','SWIR1','SWIR2','NDVI','EVI2','MSAVI2','NDWI','PSRI','NBR',
  'RED_3M','NIR1_3M','BLUE_3M','GREEN_3M','SWIR1_3M','SWIR2_3M','NDVI_3M','EVI2_3M','MSAVI2_3M',
  'NDWI_3M','PSRI_3M','NBR_3M',
  'RED_3S','NIR1_3S','BLUE_3S','GREEN_3S','SWIR1_3S','SWIR2_3S','NDVI_3S','EVI2_3S','MSAVI2_3S',
  'NDWI_3S','PSRI_3S','NBR_3S',
  'GLCM_M', 'GLCM_V', 
  'GLCM_H','GLCM_C'];
  
  // Here user may rename the Spectral Bands, Spectral Metrics, and Texture variables
  var Spectral_Metrics = Spectral_Metrics.select(varbands, varband_names);
  
  print('Second check of image collection:', Spectral_Metrics);

  // Start of a protocol to depict a variable as an example (e.g., MSAVI2)
  var msavi2 = Spectral_Metrics.select('MSAVI2');
  // Reducing the collection with a median reducer to create a composite
  var msavi2 = msavi2.reduce(ee.Reducer.median());
  // Clipping the composite within the study area
  var msavi2_clipped = msavi2.clip(Area);
  
  // Selectign a palette.
  var palette = ['FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718',
               '74A901', '66A000', '529400', '3E8601', '207401', '056201',
               '004C00', '023B01', '012E01', '011D01', '011301'];
  // Plot the variable
  Map.addLayer(msavi2_clipped, {bands: 'MSAVI2_median', min:0, max:1,palette: palette}, 'MSAVI2');
  // Plot presences and absences
  Map.addLayer(Abs, {color: 'red'}, 'Absences');
  Map.addLayer(Pre, {color: 'blue'}, 'Presences');
  // End of the protocol
  
  // Temporal scaling
  // First users need to filter the image colletion based on the ground-base Spatial-Points-Dataframe (or Spatial-Polygons-Dataframe, or Spatial-Lines-Dataframe)
  // The filtering process is a process that uses a temporal moving window around each observation date (timestamp) related to ground observations
  // The information within each moving window for each observation is therefore aggregated, and finally extracted
  
  // A constructor incorporating a temporal scaling function to extract information from groun-data
  var ExtractedData = points.map(function(feature){
  
  // Here is identified the date associated to each ground observation
  var date = ee.Number(feature.get('timestamp2'));
  
  // The temporal information should be imported in a legible format (e.g., YYYY/MM/dd). 
  // Others legible formats can be found here: https://developers.google.com/earth-engine/apidocs/ee-date-parse
  date = ee.Date.parse('YYYY/MM/dd', date);
  
  // Here users may set the size of Moving Windows for temporally scaling remotely sensed information forward and backward from each observation timestamp
  var startTempWind = date.advance(-3,'days');
  var endTempWind = date.advance(3,'days');
  
  // Here users may set the aggregating formula (e.g., mean, standard deviation, etc.)
  var FiltTempWind = Spectral_Metrics.filterDate(startTempWind, endTempWind).mean();
  
  // Remotely sensed information is extracted using the geometry feature (ground data)            
  var data = FiltTempWind.reduceRegion(ee.Reducer.first(), feature.geometry(), 30);
  // Returns a data table
  return ee.Feature(feature.setMulti(data));
  });
  
  print('Check the first row of data table :', ExtractedData.first());
  
  // Users can export the table file as CSV, and join the data table with the original shapefile by the "ID" field of the ground-data vector
  Export.table.toDrive({
  collection: ExtractedData,
  description:'Landsat_PA_Multispectral_2017',
  fileFormat: 'CSV',
  'folder': 'Landsat_PA_Multispectral'
  });
  
  // Here users can join the data table to the original shapefile within GEE, yet the operation is time-consuming
  
  // The following process is required to join the extracted information with the original vector data
  // Defining the original Spatial Dataframe
  var OriginalSpatialPointsDataframe = points;
  
  // Defining the extracted data table
  var ExtractedSpatialPointsDataframe = ee.FeatureCollection(ExtractedData);
  
  // Defining the matching field between the two collections
  var JoinFilter = ee.Filter.equals({
  leftField: 'ID',
  rightField: 'ID'
  });
  
  // Defining the "join" parameter (https://developers.google.com/earth-engine/apidocs/ee-join-inner)
  var ParJoin = ee.Join.inner('primary', 'secondary');
  
  // Concatenating the two collections based on the "join" parameter
  var DataframeJoin = ParJoin.apply(OriginalSpatialPointsDataframe, ExtractedSpatialPointsDataframe,JoinFilter);
  
  // Collapsing the Extracted data table into the Original Spatial Dataframe
  function CollapsJoin(feature){
  return ee.Feature(feature.get('primary')).copyProperties(feature.get('secondary'));
  }
  
  // Creating the object to export
  var DataframeJoin = DataframeJoin.map(CollapsJoin);
  print('Check the first row of the SpatialPointsDataframe:', DataframeJoin.first());
  
  // Exporting the Spatial Dataframe to a SHP file
  Export.table.toDrive({
  collection: DataframeJoin,
  description:'Landsat_PA_Multispectral_2017',
  fileFormat: 'SHP',
  'folder': 'Landsat_PA_Multispectral'
  });
  
  //Alternatively, the user can indicate specific metrics to write
  //Export.table.toDrive({
  //collection: DataframeJoin,
  //description:'PA_Multispectral_2017',
  //fileFormat: 'SHP',
  //selectors: ['RED','NIR1','BLUE','GREEN','SWIR1','SWIR2','NDVI','EVI2','MSAVI2','NDWI','PSRI','NBR',
  //'RED_3M','NIR1_3M','BLUE_3M','GREEN_3M','SWIR1_3M','SWIR2_3M','NDVI_3M','EVI2_3M','MSAVI2_3M',
  //'NDWI_3M','PSRI_3M','NBR_3M',
  //'RED_3S','NIR1_3S','BLUE_3S','GREEN_3S','SWIR1_3S','SWIR2_3S','NDVI_3S','EVI2_3S','MSAVI2_3S',
  //'NDWI_3S','PSRI_3S','NBR_3S',
  //'GLCM_M', 'GLCM_V', 
  //'GLCM_H','GLCM_C',
  //'ID','type','ind_ident','timestamp','timestamp2']
  //});
