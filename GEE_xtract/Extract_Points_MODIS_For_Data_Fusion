// The GEE_extract code prepared for extracting data from MODIS satellites

// The code is organised into three sub-steps: 

// * The first sub-step concerns the retention and pre-processing of the available images, to avoid anomalous pixels, 
//  softening uncertainties and retaining high quality pixels

// * The second sub-step shows how to calculate spectral metrics for each available multispectral image of the time-series

// * The third sub-step demonstrates how to apply spatial and temporal scales along the time-series, then to extract remotely sensed information from ground data.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Sub-step 1: Data filtering
   
  // The user can select MODIS collections (https://developers.google.com/earth-engine/datasets/catalog/modis), namely GPP and LST
  var GPP = ee.ImageCollection("MODIS/006/MOD17A2H"),
  LST = ee.ImageCollection("MODIS/006/MYD11A2"),
  
  // Then, the user should select a ground-data vector, as well study area polygon, that need to be imported within the Earth Engine Code Editor (EECE), 
  // as asset through the Asset Manager (https://developers.google.com/earth-engine/guides/asset_manager)
  
  Abs = ee.FeatureCollection("users/valeriofrank/GEE_xtract/0Abs"), // Useful here only for depiction purpouse
  Pre = ee.FeatureCollection("users/valeriofrank/GEE_xtract/1Pre"), // Useful here only for depiction purpouse
  pts1 = ee.FeatureCollection("users/valeriofrank/GEE_xtract/Ground_Observations_2017"),
  pts2 = ee.FeatureCollection("users/valeriofrank/GEE_xtract/Ground_Observations_2018"), //The ground-data vector used as example for extraction
  pts3 = ee.FeatureCollection("users/valeriofrank/GEE_xtract/Ground_Observations_2019"),
  pts4 = ee.FeatureCollection("users/valeriofrank/GEE_xtract/Ground_Observations_2020"),
  pts5 = ee.FeatureCollection("users/valeriofrank/GEE_xtract/Ground_Observations_2021"),
  pts_all = ee.FeatureCollection("users/valeriofrank/GEE_xtract/Ground_Observations_All_2017_2021"),
  
  Area = ee.FeatureCollection("users/valeriofrank/GEE_xtract/Study_Area"); //The study area vector used as example
    
  // Here the user can specify the ground data vector (e.g., pts1) as an object and select the period considered for the time-series
  // These objects are depicted here to allow for quick parameter changes when extracting data from multiple datasets representing different periods
  var points = pts1;//Users may repeat this step for other dataframes (pt2, pt3, etc), which are separated by year
                    //Alternatively, they can possibly run the entire dataset (pts_all)
  var start = "2017-01-01"; //Start of time period (Year-Month-Day)
  var end = "2017-12-31"; // End of time period
  
  // Users may rename the two metrics before merging collections
  var GPPbands = ['Gpp'];
  var GPPband_names = ['GPP'];

  var LSTbands = ['LST_Day_1km'];
  var LSTband_names = ['LST'];

  // Here the users should define the period, as well as the area where restrict remote sensing data collections
    
  // The GPP metric is renamed, the collection is filtered according to the selected period, to a geographical extent,
  // and is cut to the study area
  var GPPfiltered = GPP.filterDate(start, end).select(GPPbands, GPPband_names).map(function(img){return img.clip(Area)}); 
  var GPPIndices  = GPPfiltered.select('GPP');

  // The LST metric is renamed, the collection is filtered according to the selected period, to a geographical extent,
  // and is cut to the study area
  var LSTfiltered = LST.filterDate(start, end).select(LSTbands, LSTband_names).map(function(img){return img.clip(Area)}); 
  var LSTIndices  = LSTfiltered.select('LST');

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Sub-step 2: Metrics calculation

 // LST unit of measurement from Kelvin is converted to Celsius, while retaining image acquisition time
  var LSTIndices = LSTIndices.map(function(img) {
  return img
  .multiply(0.02)
  .subtract(273.15)
  .copyProperties(img, ['system:time_start']);
  });
  
  // Users need to combine the two collections
  var GPP_LST_Indices = ee.ImageCollection(GPPfiltered.combine(LSTIndices));

  print('Second check of image collection - Habitat Metrics:', GPP_LST_Indices);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Sub-step 3: Data scaling

  // Users may define spatial and temporal scales on calculated metrics prior ground-data extraction
  
  // Spatial scaling
  
  // A constructor (addTexture_3X3_Mean) incorporating a scaling function that utilise Spatial Moving Windows of 3 pixels size, and a mean aggregating formula
  // Users may eventually change the name of the constuctor if they change some parameter (e.g., addTexture_6X6_Mean)
  var addTexture_3X3_Mean = function(image) {
  // Users may here define which metrics to scale
  var texture = image.select(['GPP','LST']).reduceNeighborhood({
  // Users may here define the type of aggregating formula (i.e, mean; https://developers.google.com/earth-engine/apidocs/ee-reducer-mean)
  // and the type of weight within spatial moving windows (https://developers.google.com/earth-engine/apidocs/ee-reducer-unweighted)
  reducer: ee.Reducer.mean().unweighted(),
  // Users may here define the shape of spatial moving windows (i.e, square or round;https://developers.google.com/earth-engine/apidocs/ee-kernel-circle)
  // and size (e.g., 3)
  kernel: ee.Kernel.circle(3),
  // Calculated metrics may be renamed
  }).rename(['GPP_3S_Mn','LST_3S_Mn']);
  // Scaled metrics may be reutrned as new bands
  return image.addBands(texture.add(ee.Image(0.0)));
  };
   
  // A constructor (addTexture_3X3_stdDev) incorporating a scaling function that utilise Spatial Moving Windows of 3 pixels size, and a standard deviation aggregating formula
  // Users may eventually change the name of the constuctor if they change some parameter (e.g., addTexture_6X6_Mean)
  var addTexture_3X3_stdDev = function(image) {
  // Users may here define which metrics to scale
  var texture = image.select(['GPP','LST']).reduceNeighborhood({
  // Users may here define the type of aggregating formula (i.e, mean; https://developers.google.com/earth-engine/apidocs/ee-reducer-mean)
  // and the type of weight within spatial moving windows (https://developers.google.com/earth-engine/apidocs/ee-reducer-unweighted)
  reducer: ee.Reducer.stdDev().unweighted(),
  // Users may here define the shape of spatial moving windows (i.e, square or round;https://developers.google.com/earth-engine/apidocs/ee-kernel-circle)
  // and size (e.g., 3)
  kernel: ee.Kernel.circle(3),
  // Calculated metrics may be renamed
  }).rename(['GPP_3S_Sd','LST_3S_Sd']);
  return image.addBands(texture.add(ee.Image(0.0)));
  };
  
  // Here, scale metrics are added to the collection
  var GPP_LST_Indices_MnSd = GPP_LST_Indices.map(addTexture_3X3_Mean).map(addTexture_3X3_stdDev);

 // Identify the variable calculated to retain within the collection
  var varbands = ['GPP','LST',
  'GPP_3S_Mn','LST_3S_Mn',
  'GPP_3S_Sd','LST_3S_Sd',
  ];
  
  // Selecting words to rename such variables, up to 10 characters due to column heading limits in the final Spatial Point Data Frame
  var varband_names = ['GPP','LST',
  'GPP_3M','LST_3M',
  'GPP_3S','LST_3S',
  ];
  
  // Here user may rename the Spectral Metrics
  var GPP_LST_Indices_MnSd = GPP_LST_Indices_MnSd.select(varbands, varband_names);
  
  print('Second check of image collection:', GPP_LST_Indices_MnSd);

  // Temporal scaling
  // First users need to filter the image colletion based on the ground-base Spatial-Points-Dataframe (or Spatial-Polygons-Dataframe, or Spatial-Lines-Dataframe)
  // The filtering process is a process that uses a temporal moving window around each observation date (timestamp) related to ground observations
  // The information within each moving window for each observation is therefore aggregated, and finally extracted
  
  // A constructor (addTexture_3X3_Mean) incorporating a temporal scaling function to extract information from groun-data
  var ExtractedData = pts1.map(function(feature){
  
  // Here is identified the date associated to each ground observation
  var date = ee.Number(feature.get('timestamp2'));
  
  // The temporal information should be imported in a legible format (e.g., YYYY/MM/dd) 
  // Others legible formats can be found here: https://developers.google.com/earth-engine/apidocs/ee-date-parse
  date = ee.Date.parse('YYYY/MM/dd', date);
  
  // Here users may set the size of Moving Windows for temporally scaling remotely sensed information forward and backward from each observation timestamp
  var startTempWind = date.advance(-4,'days');
  var endTempWind = date.advance(4,'days');
  
  // Here users may set the aggregating formula (e.g., mean, standard deviation, etc.)
  var FiltTempWind = GPP_LST_Indices_MnSd.filterDate(startTempWind, endTempWind).mean();
  
  // Remotely sensed information is extracted using the geometry feature (ground data)            
  var data = FiltTempWind.reduceRegion(ee.Reducer.first(), feature.geometry(), 250);
  // Returns a data table
  return ee.Feature(feature.setMulti(data));
  });
  
  print('Check the first row of data table :', ExtractedData.first());
  
  // Users can export the table file as CSV, and join the data table with the original shapefile by the "ID" field of the ground-data vector
  Export.table.toDrive({
  collection: ExtractedData,
  description:'MODIS_PA_GPP_LST_2017',
  fileFormat: 'CSV',
  'folder': 'MODIS_PA_GPP_LST'
  });
  
  // Here users can join the data table to the original shapefile within GEE, yet the operation is time-consuming
  
  // The following process is required to join the extracted information with the original vector data
  // Defining the original Spatial Dataframe
  var OriginalSpatialPointsDataframe = points;
  
  // Defining the extracted data table
  var ExtractedSpatialPointsDataframe = ee.FeatureCollection(ExtractedData);
  
  // Defining the matching field between the two collections
  var JoinFilter = ee.Filter.equals({
  leftField: 'ID',
  rightField: 'ID'
  });
  
  // Defining the "join" parameter (https://developers.google.com/earth-engine/apidocs/ee-join-inner)
  var ParJoin = ee.Join.inner('primary', 'secondary');
  
  // Concatenating the two collections based on the "join" parameter
  var DataframeJoin = ParJoin.apply(OriginalSpatialPointsDataframe, ExtractedSpatialPointsDataframe,JoinFilter);
  
  // Collapsing the Extracted data table into the Original Spatial Dataframe
  function CollapsJoin(feature){
  return ee.Feature(feature.get('primary')).copyProperties(feature.get('secondary'));
  }
  
  // Creating the object to export
  var DataframeJoin = DataframeJoin.map(CollapsJoin);
  print('Check the first row of the SpatialPointsDataframe:', DataframeJoin.first());
  
  // Exporting the Spatial Dataframe to a SHP file
  Export.table.toDrive({
  collection: DataframeJoin,
  description:'MODIS_PA_GPP_LST_2017',
  fileFormat: 'SHP',
  'folder': 'MODIS_PA_GPP_LST'
  });
  
  //Alternatively, the user can indicate specific metrics to write
  //Export.table.toDrive({
  //collection: DataframeJoin,
  //description:'PA_Multispectral_2017',
  //fileFormat: 'SHP',
  //selectors: ['RED','NIR1','BLUE','GREEN','SWIR1','SWIR2','NDVI','EVI2','MSAVI2','NDWI','PSRI','NBR',
  //'RED_3M','NIR1_3M','BLUE_3M','GREEN_3M','SWIR1_3M','SWIR2_3M','NDVI_3M','EVI2_3M','MSAVI2_3M',
  //'NDWI_3M','PSRI_3M','NBR_3M',
  //'RED_3S','NIR1_3S','BLUE_3S','GREEN_3S','SWIR1_3S','SWIR2_3S','NDVI_3S','EVI2_3S','MSAVI2_3S',
  //'NDWI_3S','PSRI_3S','NBR_3S',
  //'GLCM_M', 'GLCM_V', 
  //'GLCM_H','GLCM_C',
  //'ID','type','ind_ident','timestamp','timestamp2']
  //});
